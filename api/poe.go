/*
Copyright ArxanFintech Technology Ltd. 2018 All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

                 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package api

import (
	"encoding/json"
	"fmt"
	"net/http"
	"reflect"

	"github.com/arxanchain/sdk-go-common/errors"
	"github.com/arxanchain/sdk-go-common/rest"
	restapi "github.com/arxanchain/sdk-go-common/rest/api"
	rtstructs "github.com/arxanchain/sdk-go-common/rest/structs"
	"github.com/arxanchain/sdk-go-common/structs"
)

// CreatePOE is used to create POE digital asset.
//
// The default invoking mode is asynchronous, it will return
// without waiting for blockchain transaction confirmation.
//
// If you want to switch to synchronous invoking mode, set
// 'BC-Invoke-Mode' header to 'sync' value. In synchronous mode,
// it will not return until the blockchain transaction is confirmed.
//
// The signature is generated by caller using
// 'github.com/arxanchain/sdk-go-common/crypto/tools/sign-util' tool.
//
func (w *WalletClient) CreatePOE(header http.Header, body *structs.POEBody, sign *structs.SignatureBody) (result *structs.WalletResponse, err error) {
	if body == nil {
		err = fmt.Errorf("request payload invalid")
		return
	}

	// Build http request
	r := w.c.NewRequest("POST", "/v1/poe/create")
	r.SetHeaders(header)

	// Build request payload
	reqPayload, err := json.Marshal(body)
	if err != nil {
		return
	}

	// Build request body
	reqBody := &structs.WalletRequest{
		Payload:   string(reqPayload),
		Signature: sign,
	}
	r.SetBody(reqBody)

	// Do http request
	_, resp, err := restapi.RequireOK(w.c.DoRequest(r))
	if err != nil {
		return
	}
	defer resp.Body.Close()

	// Parse http response
	var respBody rtstructs.Response
	if err = restapi.DecodeBody(resp, &respBody); err != nil {
		return
	}

	if respBody.ErrCode != errors.SuccCode {
		err = rest.CodedError(respBody.ErrCode, respBody.ErrMessage)
		return
	}

	payload, ok := respBody.Payload.(string)
	if !ok {
		err = fmt.Errorf("response payload type invalid: %v", reflect.TypeOf(respBody.Payload))
		return
	}

	err = json.Unmarshal([]byte(payload), &result)

	return
}

// CreatePOESign is used to create POE digital asset.
//
// The default invoking mode is asynchronous, it will return
// without waiting for blockchain transaction confirmation.
//
// If you want to switch to synchronous invoking mode, set
// 'BC-Invoke-Mode' header to 'sync' value. In synchronous mode,
// it will not return until the blockchain transaction is confirmed.
//
// The signature is generated by SDK, need to pass the user private key to the SDK.
//
func (w *WalletClient) CreatePOESign(header http.Header, body *structs.POEBody, signParams *structs.SignatureParam) (result *structs.WalletResponse, err error) {
	if body == nil {
		err = fmt.Errorf("request payload invalid")
		return
	}

	// Build request signature
	reqPayload, err := json.Marshal(body)
	if err != nil {
		return
	}
	sign, err := buildSignatureBody(signParams, reqPayload)
	if err != nil {
		return
	}

	return w.CreatePOE(header, body, sign)
}

// UpdatePOE is used to update POE digital asset.
//
// The default invoking mode is asynchronous, it will return
// without waiting for blockchain transaction confirmation.
//
// If you want to switch to synchronous invoking mode, set
// 'BC-Invoke-Mode' header to 'sync' value. In synchronous mode,
// it will not return until the blockchain transaction is confirmed.
//
// The signature is generated by caller using
// 'github.com/arxanchain/sdk-go-common/crypto/tools/sign-util' tool.
//
func (w *WalletClient) UpdatePOE(header http.Header, body *structs.POEBody, sign *structs.SignatureBody) (result *structs.WalletResponse, err error) {
	if body == nil {
		err = fmt.Errorf("request payload invalid")
		return
	}

	// Build http request
	r := w.c.NewRequest("PUT", "/v1/poe/update")
	r.SetHeaders(header)

	// Build request payload
	reqPayload, err := json.Marshal(body)
	if err != nil {
		return
	}

	// Build request body
	reqBody := &structs.WalletRequest{
		Payload:   string(reqPayload),
		Signature: sign,
	}
	r.SetBody(reqBody)

	// Do http request
	_, resp, err := restapi.RequireOK(w.c.DoRequest(r))
	if err != nil {
		return
	}
	defer resp.Body.Close()

	// Parse http response
	var respBody rtstructs.Response
	if err = restapi.DecodeBody(resp, &respBody); err != nil {
		return
	}

	if respBody.ErrCode != errors.SuccCode {
		err = rest.CodedError(respBody.ErrCode, respBody.ErrMessage)
		return
	}

	payload, ok := respBody.Payload.(string)
	if !ok {
		err = fmt.Errorf("response payload type invalid: %v", reflect.TypeOf(respBody.Payload))
		return
	}

	err = json.Unmarshal([]byte(payload), &result)

	return
}

// UpdatePOESign is used to update POE digital asset.
//
// The default invoking mode is asynchronous, it will return
// without waiting for blockchain transaction confirmation.
//
// If you want to switch to synchronous invoking mode, set
// 'BC-Invoke-Mode' header to 'sync' value. In synchronous mode,
// it will not return until the blockchain transaction is confirmed.
//
// The signature is generated by SDK, need to pass the user private key to the SDK.
//
func (w *WalletClient) UpdatePOESign(header http.Header, body *structs.POEBody, signParams *structs.SignatureParam) (result *structs.WalletResponse, err error) {
	if body == nil {
		err = fmt.Errorf("request payload invalid")
		return
	}

	// Build request signature
	reqPayload, err := json.Marshal(body)
	if err != nil {
		return
	}
	sign, err := buildSignatureBody(signParams, reqPayload)
	if err != nil {
		return
	}

	return w.UpdatePOE(header, body, sign)
}

// QueryPOE is used to query POE digital asset.
//
func (w *WalletClient) QueryPOE(header http.Header, id structs.Identifier) (result *structs.POEPayload, err error) {
	r := w.c.NewRequest("GET", "/v1/poe")
	r.SetHeaders(header)
	r.SetParam("id", string(id))

	_, resp, err := restapi.RequireOK(w.c.DoRequest(r))
	if err != nil {
		return
	}
	defer resp.Body.Close()

	// parse http response
	var respBody rtstructs.Response
	if err = restapi.DecodeBody(resp, &respBody); err != nil {
		return
	}

	if respBody.ErrCode != errors.SuccCode {
		err = rest.CodedError(respBody.ErrCode, respBody.ErrMessage)
		return
	}

	respPayload, ok := respBody.Payload.(string)
	if !ok {
		err = fmt.Errorf("response payload type invalid: %v", reflect.TypeOf(respBody.Payload))
		return
	}

	err = json.Unmarshal([]byte(respPayload), &result)

	return
}

// UploadPOEFile is used to upload file for specified POE digital asset.
//
func (w *WalletClient) UploadPOEFile(header http.Header, poeID string, poeFile string) (result *structs.WalletResponse, err error) {
	//TODO: upload poe file
	return
}
